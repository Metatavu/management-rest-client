{{>licenseInfo}}
package {{package}};

import {{modelPackage}}.*;

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {

  private ApiClient client;
  private String baseUrl;

  public {{classname}}(String baseUrl, ApiClient client) {
    this.client = client;
    this.baseUrl = baseUrl;
  }
  
  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}{{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}
   */
  public ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}> {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    {{#queryParams}}if ({{paramName}} != null)
    queryParams.put("{{baseName}}", {{paramName}});
    {{/queryParams}}
    
    {{#formParams}}if ({{paramName}} != null)
      formParams.put("{{baseName}}", {{paramName}});
    {{/formParams}}
    
    String requestPath = String.format("%s{{{path}}}"{{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", {{paramName}}){{/pathParams}}, baseUrl);
      
    ResultType<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}> resultType = new ResultType<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}>() {};
    return client.do{{httpMethod}}Request(requestPath, resultType, queryParams, formParams);
  }
  {{/operation}}
  
}
{{/operations}}
