/**
 * localhost
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fi.metatavu.management.client;

import fi.metatavu.management.client.model.*;

import fi.metatavu.management.client.model.Error;
import fi.metatavu.management.client.model.Menu;
import fi.metatavu.management.client.model.Menuitem;
import fi.metatavu.management.client.model.Pagemappings;
import java.time.LocalDateTime;
import fi.metatavu.management.client.model.Announcement;
import fi.metatavu.management.client.model.Banner;
import fi.metatavu.management.client.model.Category;
import fi.metatavu.management.client.model.Comment;
import fi.metatavu.management.client.model.Fragment;
import fi.metatavu.management.client.model.IncidentAreas;
import fi.metatavu.management.client.model.Incident;
import fi.metatavu.management.client.model.Attachment;
import fi.metatavu.management.client.model.Page;
import fi.metatavu.management.client.model.PageRevision;
import fi.metatavu.management.client.model.Post;
import fi.metatavu.management.client.model.PostRevision;
import fi.metatavu.management.client.model.Settings;
import fi.metatavu.management.client.model.Shortlink;
import fi.metatavu.management.client.model.Status;
import fi.metatavu.management.client.model.Tag;
import fi.metatavu.management.client.model.Taxonomy;
import fi.metatavu.management.client.model.Tile;
import fi.metatavu.management.client.model.Type;
import fi.metatavu.management.client.model.User;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-05-12T07:46:35.856+03:00")
public class DefaultApi {

  private ApiClient client;
  private String baseUrl;

  public DefaultApi(String baseUrl, ApiClient client) {
    this.client = client;
    this.baseUrl = baseUrl;
  }
  
  /**
   * 
   * 
   * @param slug  (optional)
   */
  public ApiResponse<List<Menu>> kuntaApiMenusGet(String slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (slug != null)
    queryParams.put("slug", slug);
    
        
    String requestPath = String.format("%s/kunta-api/menus", baseUrl);
      
    ResultType<List<Menu>> resultType = new ResultType<List<Menu>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param slug  (optional)
   */
  public ApiResponse<Object> kuntaApiMenusHead(String slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (slug != null)
    queryParams.put("slug", slug);
    
        
    String requestPath = String.format("%s/kunta-api/menus", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   */
  public ApiResponse<Menu> kuntaApiMenusIdGet(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/kunta-api/menus/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Menu> resultType = new ResultType<Menu>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   */
  public ApiResponse<Object> kuntaApiMenusIdHead(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/kunta-api/menus/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param menuId  (required)
   */
  public ApiResponse<List<Menuitem>> kuntaApiMenusMenuIdItemsGet(String menuId) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/kunta-api/menus/{menuId}/items"
      .replaceAll("\\{" + "menuId" + "\\}", menuId), baseUrl);
      
    ResultType<List<Menuitem>> resultType = new ResultType<List<Menuitem>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param menuId  (required)
   */
  public ApiResponse<Object> kuntaApiMenusMenuIdItemsHead(String menuId) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/kunta-api/menus/{menuId}/items"
      .replaceAll("\\{" + "menuId" + "\\}", menuId), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   */
  public ApiResponse<List<Pagemappings>> kuntaApiPagemappingsGet() {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/kunta-api/pagemappings", baseUrl);
      
    ResultType<List<Pagemappings>> resultType = new ResultType<List<Pagemappings>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   */
  public ApiResponse<Object> kuntaApiPagemappingsHead() {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/kunta-api/pagemappings", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<List<Announcement>> wpV2AnnouncementGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/announcement", baseUrl);
      
    ResultType<List<Announcement>> resultType = new ResultType<List<Announcement>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<Object> wpV2AnnouncementHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/announcement", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Announcement> wpV2AnnouncementIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/announcement/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Announcement> resultType = new ResultType<Announcement>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Announcement> wpV2AnnouncementIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/announcement/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Announcement> resultType = new ResultType<Announcement>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2AnnouncementIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/announcement/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   */
  public ApiResponse<Announcement> wpV2AnnouncementIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, String template) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (template != null)
      formParams.put("template", template);
    
    String requestPath = String.format("%s/wp/v2/announcement/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Announcement> resultType = new ResultType<Announcement>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   */
  public ApiResponse<Announcement> wpV2AnnouncementPost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, String template) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (template != null)
      formParams.put("template", template);
    
    String requestPath = String.format("%s/wp/v2/announcement", baseUrl);
      
    ResultType<Announcement> resultType = new ResultType<Announcement>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<List<Banner>> wpV2BannerGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/banner", baseUrl);
      
    ResultType<List<Banner>> resultType = new ResultType<List<Banner>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<Object> wpV2BannerHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/banner", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Banner> wpV2BannerIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/banner/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Banner> resultType = new ResultType<Banner>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Banner> wpV2BannerIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/banner/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Banner> resultType = new ResultType<Banner>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2BannerIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/banner/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param featuredMedia Kohteen artikkelikuvan ID. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param bannerLink Banner link (optional)
   * @param bannerTextColor Banner text color (optional)
   * @param bannerBackgroundColor Banner background color (optional)
   * @param bannerHideTitle Banner hide title (optional)
   */
  public ApiResponse<Banner> wpV2BannerIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, Integer featuredMedia, String template, String bannerLink, String bannerTextColor, String bannerBackgroundColor, Boolean bannerHideTitle) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (template != null)
      formParams.put("template", template);
if (bannerLink != null)
      formParams.put("banner-link", bannerLink);
if (bannerTextColor != null)
      formParams.put("banner-text-color", bannerTextColor);
if (bannerBackgroundColor != null)
      formParams.put("banner-background-color", bannerBackgroundColor);
if (bannerHideTitle != null)
      formParams.put("banner-hide-title", bannerHideTitle);
    
    String requestPath = String.format("%s/wp/v2/banner/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Banner> resultType = new ResultType<Banner>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param featuredMedia Kohteen artikkelikuvan ID. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param bannerLink Banner link (optional)
   * @param bannerTextColor Banner text color (optional)
   * @param bannerBackgroundColor Banner background color (optional)
   * @param bannerHideTitle Banner hide title (optional)
   */
  public ApiResponse<Banner> wpV2BannerPost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, Integer featuredMedia, String template, String bannerLink, String bannerTextColor, String bannerBackgroundColor, Boolean bannerHideTitle) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (template != null)
      formParams.put("template", template);
if (bannerLink != null)
      formParams.put("banner-link", bannerLink);
if (bannerTextColor != null)
      formParams.put("banner-text-color", bannerTextColor);
if (bannerBackgroundColor != null)
      formParams.put("banner-background-color", bannerBackgroundColor);
if (bannerHideTitle != null)
      formParams.put("banner-hide-title", bannerHideTitle);
    
    String requestPath = String.format("%s/wp/v2/banner", baseUrl);
      
    ResultType<Banner> resultType = new ResultType<Banner>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to asc)
   * @param orderby Lajittele kokoelma termin ominaisuuden mukaan. (optional, default to name)
   * @param hideEmpty Piilotetaanko termit, jotka eivät liity mihinkään artikkeliin? (optional)
   * @param parent Rajaa tulokset tiettyyn ylätasoon liittymisen mukaan. (optional)
   * @param post Rajaa tulokset termeihin, jotka liittyvät tiettyyn artikkeliin. (optional)
   * @param slug Rajaa tulokset tietyn polkutunnuksen mukaan. (optional)
   */
  public ApiResponse<List<Category>> wpV2CategoriesGet(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, String order, String orderby, Boolean hideEmpty, Integer parent, Integer post, List<String> slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (hideEmpty != null)
    queryParams.put("hide_empty", hideEmpty);
if (parent != null)
    queryParams.put("parent", parent);
if (post != null)
    queryParams.put("post", post);
if (slug != null)
    queryParams.put("slug", slug);
    
        
    String requestPath = String.format("%s/wp/v2/categories", baseUrl);
      
    ResultType<List<Category>> resultType = new ResultType<List<Category>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to asc)
   * @param orderby Lajittele kokoelma termin ominaisuuden mukaan. (optional, default to name)
   * @param hideEmpty Piilotetaanko termit, jotka eivät liity mihinkään artikkeliin? (optional)
   * @param parent Rajaa tulokset tiettyyn ylätasoon liittymisen mukaan. (optional)
   * @param post Rajaa tulokset termeihin, jotka liittyvät tiettyyn artikkeliin. (optional)
   * @param slug Rajaa tulokset tietyn polkutunnuksen mukaan. (optional)
   */
  public ApiResponse<Object> wpV2CategoriesHead(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, String order, String orderby, Boolean hideEmpty, Integer parent, Integer post, List<String> slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (hideEmpty != null)
    queryParams.put("hide_empty", hideEmpty);
if (parent != null)
    queryParams.put("parent", parent);
if (post != null)
    queryParams.put("post", post);
if (slug != null)
    queryParams.put("slug", slug);
    
        
    String requestPath = String.format("%s/wp/v2/categories", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param force Arvon tulee olla true, koska termit eivät tue roskakoria. (optional)
   */
  public ApiResponse<Category> wpV2CategoriesIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/categories/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Category> resultType = new ResultType<Category>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Category> wpV2CategoriesIdGet(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/categories/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Category> resultType = new ResultType<Category>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2CategoriesIdHead(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/categories/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param description Termin kuvaus HTML-muodossa. (optional)
   * @param name HTML-muotoiltu otsikko termille. (optional)
   * @param slug Termin alfanumeerinen tunniste joka on saman lajin sisällä yksilöivä. (optional)
   * @param parent Ylemmän tason termin ID. (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<Category> wpV2CategoriesIdPost(String id, Integer id2, String description, String name, String slug, Integer parent, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
if (parent != null)
      formParams.put("parent", parent);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/categories/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Category> resultType = new ResultType<Category>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param name HTML-muotoiltu otsikko termille. (required)
   * @param description Termin kuvaus HTML-muodossa. (optional)
   * @param slug Termin alfanumeerinen tunniste joka on saman lajin sisällä yksilöivä. (optional)
   * @param parent Ylemmän tason termin ID. (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<Category> wpV2CategoriesPost(String name, String description, String slug, Integer parent, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
if (parent != null)
      formParams.put("parent", parent);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/categories", baseUrl);
      
    ResultType<Category> resultType = new ResultType<Category>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param author Rajaa tulokset kommentteihin, jotka on liitetty tiettyihin käyttäjä-ID:isiin. Vaatii tunnistautumisen. (optional)
   * @param authorExclude Varmistaa ettei kommentteja ole liitetty tiettyihin käyttäjä-ID:isiin. Vaatii tunnistautumisen. (optional)
   * @param authorEmail Rajaa tulokset tietyllä kirjoittajan sähköpostiosoitteella. Vaatii tunnistautumisen. (optional)
   * @param before Rajoita tulokset kommentteihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date_gmt)
   * @param parent Rajaa tulokset kommentteihin, joilla on tiettyjen vanhempien ID. (optional)
   * @param parentExclude Varmistaa ettei tuloksilla ole tiettyä vanhemman ID:tä. (optional)
   * @param post Rajaa tulokset kommentteihin, joille on asetettu tietty artikkeli-ID. (optional)
   * @param status Rajaa tulokset kommentteihin, joille on asetettu tietty tila. Vaatii tunnistautumisen. (optional, default to approve)
   * @param type Rajaa tulokset kommentteihin, joille on asetettu tietty tyyppi. Vaatii tunnistautumisen. (optional, default to comment)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<List<Comment>> wpV2CommentsGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, String authorEmail, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, List<String> post, String status, String type, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (authorEmail != null)
    queryParams.put("author_email", authorEmail);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (post != null)
    queryParams.put("post", post);
if (status != null)
    queryParams.put("status", status);
if (type != null)
    queryParams.put("type", type);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/comments", baseUrl);
      
    ResultType<List<Comment>> resultType = new ResultType<List<Comment>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param author Rajaa tulokset kommentteihin, jotka on liitetty tiettyihin käyttäjä-ID:isiin. Vaatii tunnistautumisen. (optional)
   * @param authorExclude Varmistaa ettei kommentteja ole liitetty tiettyihin käyttäjä-ID:isiin. Vaatii tunnistautumisen. (optional)
   * @param authorEmail Rajaa tulokset tietyllä kirjoittajan sähköpostiosoitteella. Vaatii tunnistautumisen. (optional)
   * @param before Rajoita tulokset kommentteihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date_gmt)
   * @param parent Rajaa tulokset kommentteihin, joilla on tiettyjen vanhempien ID. (optional)
   * @param parentExclude Varmistaa ettei tuloksilla ole tiettyä vanhemman ID:tä. (optional)
   * @param post Rajaa tulokset kommentteihin, joille on asetettu tietty artikkeli-ID. (optional)
   * @param status Rajaa tulokset kommentteihin, joille on asetettu tietty tila. Vaatii tunnistautumisen. (optional, default to approve)
   * @param type Rajaa tulokset kommentteihin, joille on asetettu tietty tyyppi. Vaatii tunnistautumisen. (optional, default to comment)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2CommentsHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, String authorEmail, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, List<String> post, String status, String type, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (authorEmail != null)
    queryParams.put("author_email", authorEmail);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (post != null)
    queryParams.put("post", post);
if (status != null)
    queryParams.put("status", status);
if (type != null)
    queryParams.put("type", type);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/comments", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Comment> wpV2CommentsIdDelete(String id, Integer id2, Boolean force, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/comments/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Comment> resultType = new ResultType<Comment>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Comment> wpV2CommentsIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/comments/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Comment> resultType = new ResultType<Comment>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2CommentsIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/comments/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param author Käyttäjän ID, jos kirjoittaja on tiedossa. (optional)
   * @param authorEmail Kohteen kirjoittajan sähköpostiosoite. (optional)
   * @param authorIp Kohteen kirjoittajan IP-osoite. (optional)
   * @param authorName Kirjoittajan näyttönimi. (optional)
   * @param authorUrl Kohteen kirjoittajan URL. (optional)
   * @param authorUserAgent Kohteen kirjoittajan selain. (optional)
   * @param content Kohteen sisältö. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param parent Kohteen vanhemman ID. (optional)
   * @param post Liittyvän artikkelin ID. (optional)
   * @param status Kohteen tila.  (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<Comment> wpV2CommentsIdPost(String id, Integer id2, Integer author, String authorEmail, String authorIp, String authorName, String authorUrl, String authorUserAgent, String content, LocalDateTime date, LocalDateTime dateGmt, Integer parent, Integer post, String status, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (author != null)
      formParams.put("author", author);
if (authorEmail != null)
      formParams.put("author_email", authorEmail);
if (authorIp != null)
      formParams.put("author_ip", authorIp);
if (authorName != null)
      formParams.put("author_name", authorName);
if (authorUrl != null)
      formParams.put("author_url", authorUrl);
if (authorUserAgent != null)
      formParams.put("author_user_agent", authorUserAgent);
if (content != null)
      formParams.put("content", content);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (parent != null)
      formParams.put("parent", parent);
if (post != null)
      formParams.put("post", post);
if (status != null)
      formParams.put("status", status);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/comments/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Comment> resultType = new ResultType<Comment>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param author Käyttäjän ID, jos kirjoittaja on tiedossa. (optional)
   * @param authorEmail Kohteen kirjoittajan sähköpostiosoite. (optional)
   * @param authorIp Kohteen kirjoittajan IP-osoite. (optional)
   * @param authorName Kirjoittajan näyttönimi. (optional)
   * @param authorUrl Kohteen kirjoittajan URL. (optional)
   * @param authorUserAgent Kohteen kirjoittajan selain. (optional)
   * @param content Kohteen sisältö. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param parent Kohteen vanhemman ID. (optional)
   * @param post Liittyvän artikkelin ID. (optional)
   * @param status Kohteen tila.  (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<Comment> wpV2CommentsPost(Integer author, String authorEmail, String authorIp, String authorName, String authorUrl, String authorUserAgent, String content, LocalDateTime date, LocalDateTime dateGmt, Integer parent, Integer post, String status, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (author != null)
      formParams.put("author", author);
if (authorEmail != null)
      formParams.put("author_email", authorEmail);
if (authorIp != null)
      formParams.put("author_ip", authorIp);
if (authorName != null)
      formParams.put("author_name", authorName);
if (authorUrl != null)
      formParams.put("author_url", authorUrl);
if (authorUserAgent != null)
      formParams.put("author_user_agent", authorUserAgent);
if (content != null)
      formParams.put("content", content);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (parent != null)
      formParams.put("parent", parent);
if (post != null)
      formParams.put("post", post);
if (status != null)
      formParams.put("status", status);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/comments", baseUrl);
      
    ResultType<Comment> resultType = new ResultType<Comment>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<List<Fragment>> wpV2FragmentGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/fragment", baseUrl);
      
    ResultType<List<Fragment>> resultType = new ResultType<List<Fragment>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<Object> wpV2FragmentHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/fragment", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Fragment> wpV2FragmentIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/fragment/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Fragment> resultType = new ResultType<Fragment>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Fragment> wpV2FragmentIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/fragment/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Fragment> resultType = new ResultType<Fragment>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2FragmentIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/fragment/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   */
  public ApiResponse<Fragment> wpV2FragmentIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, String template) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (template != null)
      formParams.put("template", template);
    
    String requestPath = String.format("%s/wp/v2/fragment/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Fragment> resultType = new ResultType<Fragment>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   */
  public ApiResponse<Fragment> wpV2FragmentPost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, String template) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (template != null)
      formParams.put("template", template);
    
    String requestPath = String.format("%s/wp/v2/fragment", baseUrl);
      
    ResultType<Fragment> resultType = new ResultType<Fragment>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to asc)
   * @param orderby Lajittele kokoelma termin ominaisuuden mukaan. (optional, default to name)
   * @param hideEmpty Piilotetaanko termit, jotka eivät liity mihinkään artikkeliin? (optional)
   * @param post Rajaa tulokset termeihin, jotka liittyvät tiettyyn artikkeliin. (optional)
   * @param slug Rajaa tulokset tietyn polkutunnuksen mukaan. (optional)
   */
  public ApiResponse<List<IncidentAreas>> wpV2IncidentAreasGet(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer post, List<String> slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (hideEmpty != null)
    queryParams.put("hide_empty", hideEmpty);
if (post != null)
    queryParams.put("post", post);
if (slug != null)
    queryParams.put("slug", slug);
    
        
    String requestPath = String.format("%s/wp/v2/incident_areas", baseUrl);
      
    ResultType<List<IncidentAreas>> resultType = new ResultType<List<IncidentAreas>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to asc)
   * @param orderby Lajittele kokoelma termin ominaisuuden mukaan. (optional, default to name)
   * @param hideEmpty Piilotetaanko termit, jotka eivät liity mihinkään artikkeliin? (optional)
   * @param post Rajaa tulokset termeihin, jotka liittyvät tiettyyn artikkeliin. (optional)
   * @param slug Rajaa tulokset tietyn polkutunnuksen mukaan. (optional)
   */
  public ApiResponse<Object> wpV2IncidentAreasHead(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer post, List<String> slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (hideEmpty != null)
    queryParams.put("hide_empty", hideEmpty);
if (post != null)
    queryParams.put("post", post);
if (slug != null)
    queryParams.put("slug", slug);
    
        
    String requestPath = String.format("%s/wp/v2/incident_areas", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param force Arvon tulee olla true, koska termit eivät tue roskakoria. (optional)
   */
  public ApiResponse<IncidentAreas> wpV2IncidentAreasIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/incident_areas/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<IncidentAreas> resultType = new ResultType<IncidentAreas>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<IncidentAreas> wpV2IncidentAreasIdGet(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/incident_areas/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<IncidentAreas> resultType = new ResultType<IncidentAreas>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2IncidentAreasIdHead(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/incident_areas/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param description Termin kuvaus HTML-muodossa. (optional)
   * @param name HTML-muotoiltu otsikko termille. (optional)
   * @param slug Termin alfanumeerinen tunniste joka on saman lajin sisällä yksilöivä. (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<IncidentAreas> wpV2IncidentAreasIdPost(String id, Integer id2, String description, String name, String slug, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/incident_areas/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<IncidentAreas> resultType = new ResultType<IncidentAreas>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param name HTML-muotoiltu otsikko termille. (required)
   * @param description Termin kuvaus HTML-muodossa. (optional)
   * @param slug Termin alfanumeerinen tunniste joka on saman lajin sisällä yksilöivä. (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<IncidentAreas> wpV2IncidentAreasPost(String name, String description, String slug, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/incident_areas", baseUrl);
      
    ResultType<IncidentAreas> resultType = new ResultType<IncidentAreas>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   * @param incidentAreas Rajaa tulokset kohteisiin, joilla on valittu termi taksonomiassa incident_areas. (optional)
   * @param incidentAreasExclude Rajaa tulokset sisältämään kaikki paitsi kohteet, joilla on annettu termi taksonomiassa incident_areas. (optional)
   */
  public ApiResponse<List<Incident>> wpV2IncidentGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status, List<String> incidentAreas, List<String> incidentAreasExclude) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (incidentAreas != null)
    queryParams.put("incident_areas", incidentAreas);
if (incidentAreasExclude != null)
    queryParams.put("incident_areas_exclude", incidentAreasExclude);
    
        
    String requestPath = String.format("%s/wp/v2/incident", baseUrl);
      
    ResultType<List<Incident>> resultType = new ResultType<List<Incident>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   * @param incidentAreas Rajaa tulokset kohteisiin, joilla on valittu termi taksonomiassa incident_areas. (optional)
   * @param incidentAreasExclude Rajaa tulokset sisältämään kaikki paitsi kohteet, joilla on annettu termi taksonomiassa incident_areas. (optional)
   */
  public ApiResponse<Object> wpV2IncidentHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status, List<String> incidentAreas, List<String> incidentAreasExclude) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (incidentAreas != null)
    queryParams.put("incident_areas", incidentAreas);
if (incidentAreasExclude != null)
    queryParams.put("incident_areas_exclude", incidentAreasExclude);
    
        
    String requestPath = String.format("%s/wp/v2/incident", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Incident> wpV2IncidentIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/incident/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Incident> resultType = new ResultType<Incident>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Incident> wpV2IncidentIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/incident/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Incident> resultType = new ResultType<Incident>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2IncidentIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/incident/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param incidentAreas Kohteeseen liitetyt termit taksonomiassa incident_areas. (optional)
   * @param incidentType Incident type (optional)
   * @param description Incident description (optional)
   * @param areas Incident areas (optional)
   * @param startTime Incident start time (optional)
   * @param endTime Incident end time (optional)
   */
  public ApiResponse<Incident> wpV2IncidentIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String template, List<String> incidentAreas, String incidentType, String description, List<String> areas, LocalDateTime startTime, LocalDateTime endTime) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (template != null)
      formParams.put("template", template);
if (incidentAreas != null)
      formParams.put("incident_areas", incidentAreas);
if (incidentType != null)
      formParams.put("incident_type", incidentType);
if (description != null)
      formParams.put("description", description);
if (areas != null)
      formParams.put("areas", areas);
if (startTime != null)
      formParams.put("start_time", startTime);
if (endTime != null)
      formParams.put("end_time", endTime);
    
    String requestPath = String.format("%s/wp/v2/incident/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Incident> resultType = new ResultType<Incident>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param incidentAreas Kohteeseen liitetyt termit taksonomiassa incident_areas. (optional)
   * @param incidentType Incident type (optional)
   * @param description Incident description (optional)
   * @param areas Incident areas (optional)
   * @param startTime Incident start time (optional)
   * @param endTime Incident end time (optional)
   */
  public ApiResponse<Incident> wpV2IncidentPost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String template, List<String> incidentAreas, String incidentType, String description, List<String> areas, LocalDateTime startTime, LocalDateTime endTime) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (template != null)
      formParams.put("template", template);
if (incidentAreas != null)
      formParams.put("incident_areas", incidentAreas);
if (incidentType != null)
      formParams.put("incident_type", incidentType);
if (description != null)
      formParams.put("description", description);
if (areas != null)
      formParams.put("areas", areas);
if (startTime != null)
      formParams.put("start_time", startTime);
if (endTime != null)
      formParams.put("end_time", endTime);
    
    String requestPath = String.format("%s/wp/v2/incident", baseUrl);
      
    ResultType<Incident> resultType = new ResultType<Incident>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param author Rajaa tulokset tiettyjen kirjoittajien artikkeleihin.  (optional)
   * @param authorExclude Varmistaa ettei tuloksissa ole artikkeleita, jotka on liitetty tiettyihin kirjoittajiin. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param parent Rajaa tulokset kohteisiin, joiden vanhemmalla on jokin määritellyistä id:istä. (optional)
   * @param parentExclude Rajaa tulokset kohteisiin, joiden vanhemmalla ei ole tiettyä id:tä. (optional)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to inherit)
   * @param mediaType Rajaa tulokset tietyn mediatyypin liitetiedostoihin. (optional)
   * @param mimeType Rajaa tulokset tietyn MIME-tyypin liitetiedostoihin. (optional)
   */
  public ApiResponse<List<Attachment>> wpV2MediaGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, List<String> slug, List<String> status, String mediaType, String mimeType) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (mediaType != null)
    queryParams.put("media_type", mediaType);
if (mimeType != null)
    queryParams.put("mime_type", mimeType);
    
        
    String requestPath = String.format("%s/wp/v2/media", baseUrl);
      
    ResultType<List<Attachment>> resultType = new ResultType<List<Attachment>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param author Rajaa tulokset tiettyjen kirjoittajien artikkeleihin.  (optional)
   * @param authorExclude Varmistaa ettei tuloksissa ole artikkeleita, jotka on liitetty tiettyihin kirjoittajiin. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param parent Rajaa tulokset kohteisiin, joiden vanhemmalla on jokin määritellyistä id:istä. (optional)
   * @param parentExclude Rajaa tulokset kohteisiin, joiden vanhemmalla ei ole tiettyä id:tä. (optional)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to inherit)
   * @param mediaType Rajaa tulokset tietyn mediatyypin liitetiedostoihin. (optional)
   * @param mimeType Rajaa tulokset tietyn MIME-tyypin liitetiedostoihin. (optional)
   */
  public ApiResponse<Object> wpV2MediaHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, List<String> slug, List<String> status, String mediaType, String mimeType) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (mediaType != null)
    queryParams.put("media_type", mediaType);
if (mimeType != null)
    queryParams.put("mime_type", mimeType);
    
        
    String requestPath = String.format("%s/wp/v2/media", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Attachment> wpV2MediaIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/media/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Attachment> resultType = new ResultType<Attachment>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Attachment> wpV2MediaIdGet(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/media/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Attachment> resultType = new ResultType<Attachment>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2MediaIdHead(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/media/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param author Kohteen kirjoittajan ID. (optional)
   * @param commentStatus Onko kohteen kommentointi käytössä.  (optional)
   * @param pingStatus Voiko kohteelle tehdä paluuviitteen. (optional)
   * @param meta Metakentät. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param altText Vaihtoehtoinen teksti näytettäväksi kun liitettä ei voida näyttää. (optional)
   * @param caption Liitetiedoston kuvateksti. (optional)
   * @param description Liitetiedoston kuvaus. (optional)
   * @param post Mediaan liittyvän artikkelin ID. (optional)
   */
  public ApiResponse<Attachment> wpV2MediaIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String title, Integer author, String commentStatus, String pingStatus, String meta, String template, String altText, String caption, String description, Integer post) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (author != null)
      formParams.put("author", author);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (meta != null)
      formParams.put("meta", meta);
if (template != null)
      formParams.put("template", template);
if (altText != null)
      formParams.put("alt_text", altText);
if (caption != null)
      formParams.put("caption", caption);
if (description != null)
      formParams.put("description", description);
if (post != null)
      formParams.put("post", post);
    
    String requestPath = String.format("%s/wp/v2/media/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Attachment> resultType = new ResultType<Attachment>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param author Kohteen kirjoittajan ID. (optional)
   * @param commentStatus Onko kohteen kommentointi käytössä.  (optional)
   * @param pingStatus Voiko kohteelle tehdä paluuviitteen. (optional)
   * @param meta Metakentät. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param altText Vaihtoehtoinen teksti näytettäväksi kun liitettä ei voida näyttää. (optional)
   * @param caption Liitetiedoston kuvateksti. (optional)
   * @param description Liitetiedoston kuvaus. (optional)
   * @param post Mediaan liittyvän artikkelin ID. (optional)
   */
  public ApiResponse<Attachment> wpV2MediaPost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String title, Integer author, String commentStatus, String pingStatus, String meta, String template, String altText, String caption, String description, Integer post) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (author != null)
      formParams.put("author", author);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (meta != null)
      formParams.put("meta", meta);
if (template != null)
      formParams.put("template", template);
if (altText != null)
      formParams.put("alt_text", altText);
if (caption != null)
      formParams.put("caption", caption);
if (description != null)
      formParams.put("description", description);
if (post != null)
      formParams.put("post", post);
    
    String requestPath = String.format("%s/wp/v2/media", baseUrl);
      
    ResultType<Attachment> resultType = new ResultType<Attachment>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param author Rajaa tulokset tiettyjen kirjoittajien artikkeleihin.  (optional)
   * @param authorExclude Varmistaa ettei tuloksissa ole artikkeleita, jotka on liitetty tiettyihin kirjoittajiin. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param menuOrder Rajaa tulokset tiettyyn menu_order-arvoon. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param parent Rajaa tulokset kohteisiin, joiden vanhemmalla on jokin määritellyistä id:istä. (optional)
   * @param parentExclude Rajaa tulokset kohteisiin, joiden vanhemmalla ei ole tiettyä id:tä. (optional)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<List<Page>> wpV2PagesGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer menuOrder, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (menuOrder != null)
    queryParams.put("menu_order", menuOrder);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/pages", baseUrl);
      
    ResultType<List<Page>> resultType = new ResultType<List<Page>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param author Rajaa tulokset tiettyjen kirjoittajien artikkeleihin.  (optional)
   * @param authorExclude Varmistaa ettei tuloksissa ole artikkeleita, jotka on liitetty tiettyihin kirjoittajiin. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param menuOrder Rajaa tulokset tiettyyn menu_order-arvoon. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param parent Rajaa tulokset kohteisiin, joiden vanhemmalla on jokin määritellyistä id:istä. (optional)
   * @param parentExclude Rajaa tulokset kohteisiin, joiden vanhemmalla ei ole tiettyä id:tä. (optional)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<Object> wpV2PagesHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer menuOrder, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (menuOrder != null)
    queryParams.put("menu_order", menuOrder);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/pages", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Page> wpV2PagesIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/pages/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Page> resultType = new ResultType<Page>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Page> wpV2PagesIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/pages/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Page> resultType = new ResultType<Page>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2PagesIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/pages/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param parent Kohteen vanhemman ID. (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param author Kohteen kirjoittajan ID. (optional)
   * @param excerpt Kohteen ote. (optional)
   * @param featuredMedia Kohteen artikkelikuvan ID. (optional)
   * @param commentStatus Onko kohteen kommentointi käytössä.  (optional)
   * @param pingStatus Voiko kohteelle tehdä paluuviitteen. (optional)
   * @param menuOrder Kohteen järjestysnumero suhteessa muihin samantyyppisiin kohteisiin. (optional)
   * @param meta Metakentät. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param bannerImage Banner image (optional)
   */
  public ApiResponse<Page> wpV2PagesIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, Integer parent, String title, String content, Integer author, String excerpt, Integer featuredMedia, String commentStatus, String pingStatus, Integer menuOrder, String meta, String template, Long bannerImage) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (parent != null)
      formParams.put("parent", parent);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (author != null)
      formParams.put("author", author);
if (excerpt != null)
      formParams.put("excerpt", excerpt);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (menuOrder != null)
      formParams.put("menu_order", menuOrder);
if (meta != null)
      formParams.put("meta", meta);
if (template != null)
      formParams.put("template", template);
if (bannerImage != null)
      formParams.put("banner-image", bannerImage);
    
    String requestPath = String.format("%s/wp/v2/pages/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Page> resultType = new ResultType<Page>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<List<PageRevision>> wpV2PagesParentRevisionsGet(String parent, Integer parent2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/pages/{parent}/revisions"
      .replaceAll("\\{" + "parent" + "\\}", parent), baseUrl);
      
    ResultType<List<PageRevision>> resultType = new ResultType<List<PageRevision>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2PagesParentRevisionsHead(String parent, Integer parent2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/pages/{parent}/revisions"
      .replaceAll("\\{" + "parent" + "\\}", parent), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Arvon tulee olla true, koska versiot eivät tue roskakoria. (optional)
   */
  public ApiResponse<PageRevision> wpV2PagesParentRevisionsIdDelete(String parent, String id, Integer parent2, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/pages/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<PageRevision> resultType = new ResultType<PageRevision>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<PageRevision> wpV2PagesParentRevisionsIdGet(String parent, String id, Integer parent2, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/pages/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<PageRevision> resultType = new ResultType<PageRevision>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2PagesParentRevisionsIdHead(String parent, String id, Integer parent2, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/pages/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param parent Kohteen vanhemman ID. (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param author Kohteen kirjoittajan ID. (optional)
   * @param excerpt Kohteen ote. (optional)
   * @param featuredMedia Kohteen artikkelikuvan ID. (optional)
   * @param commentStatus Onko kohteen kommentointi käytössä.  (optional)
   * @param pingStatus Voiko kohteelle tehdä paluuviitteen. (optional)
   * @param menuOrder Kohteen järjestysnumero suhteessa muihin samantyyppisiin kohteisiin. (optional)
   * @param meta Metakentät. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param bannerImage Banner image (optional)
   */
  public ApiResponse<Page> wpV2PagesPost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, Integer parent, String title, String content, Integer author, String excerpt, Integer featuredMedia, String commentStatus, String pingStatus, Integer menuOrder, String meta, String template, Long bannerImage) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (parent != null)
      formParams.put("parent", parent);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (author != null)
      formParams.put("author", author);
if (excerpt != null)
      formParams.put("excerpt", excerpt);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (menuOrder != null)
      formParams.put("menu_order", menuOrder);
if (meta != null)
      formParams.put("meta", meta);
if (template != null)
      formParams.put("template", template);
if (bannerImage != null)
      formParams.put("banner-image", bannerImage);
    
    String requestPath = String.format("%s/wp/v2/pages", baseUrl);
      
    ResultType<Page> resultType = new ResultType<Page>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param author Rajaa tulokset tiettyjen kirjoittajien artikkeleihin.  (optional)
   * @param authorExclude Varmistaa ettei tuloksissa ole artikkeleita, jotka on liitetty tiettyihin kirjoittajiin. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   * @param categories Rajaa tulokset kohteisiin, joilla on valittu termi taksonomiassa categories. (optional)
   * @param categoriesExclude Rajaa tulokset sisältämään kaikki paitsi kohteet, joilla on annettu termi taksonomiassa categories. (optional)
   * @param tags Rajaa tulokset kohteisiin, joilla on valittu termi taksonomiassa tags. (optional)
   * @param tagsExclude Rajaa tulokset sisältämään kaikki paitsi kohteet, joilla on annettu termi taksonomiassa tags. (optional)
   * @param sticky Rajaa tulokset kiinnitettyihin kohteisiin.  (optional)
   */
  public ApiResponse<List<Post>> wpV2PostsGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status, List<String> categories, List<String> categoriesExclude, List<String> tags, List<String> tagsExclude, Boolean sticky) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (categories != null)
    queryParams.put("categories", categories);
if (categoriesExclude != null)
    queryParams.put("categories_exclude", categoriesExclude);
if (tags != null)
    queryParams.put("tags", tags);
if (tagsExclude != null)
    queryParams.put("tags_exclude", tagsExclude);
if (sticky != null)
    queryParams.put("sticky", sticky);
    
        
    String requestPath = String.format("%s/wp/v2/posts", baseUrl);
      
    ResultType<List<Post>> resultType = new ResultType<List<Post>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param author Rajaa tulokset tiettyjen kirjoittajien artikkeleihin.  (optional)
   * @param authorExclude Varmistaa ettei tuloksissa ole artikkeleita, jotka on liitetty tiettyihin kirjoittajiin. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   * @param categories Rajaa tulokset kohteisiin, joilla on valittu termi taksonomiassa categories. (optional)
   * @param categoriesExclude Rajaa tulokset sisältämään kaikki paitsi kohteet, joilla on annettu termi taksonomiassa categories. (optional)
   * @param tags Rajaa tulokset kohteisiin, joilla on valittu termi taksonomiassa tags. (optional)
   * @param tagsExclude Rajaa tulokset sisältämään kaikki paitsi kohteet, joilla on annettu termi taksonomiassa tags. (optional)
   * @param sticky Rajaa tulokset kiinnitettyihin kohteisiin.  (optional)
   */
  public ApiResponse<Object> wpV2PostsHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status, List<String> categories, List<String> categoriesExclude, List<String> tags, List<String> tagsExclude, Boolean sticky) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (categories != null)
    queryParams.put("categories", categories);
if (categoriesExclude != null)
    queryParams.put("categories_exclude", categoriesExclude);
if (tags != null)
    queryParams.put("tags", tags);
if (tagsExclude != null)
    queryParams.put("tags_exclude", tagsExclude);
if (sticky != null)
    queryParams.put("sticky", sticky);
    
        
    String requestPath = String.format("%s/wp/v2/posts", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Post> wpV2PostsIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/posts/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Post> resultType = new ResultType<Post>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Post> wpV2PostsIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/posts/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Post> resultType = new ResultType<Post>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2PostsIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/posts/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param author Kohteen kirjoittajan ID. (optional)
   * @param excerpt Kohteen ote. (optional)
   * @param featuredMedia Kohteen artikkelikuvan ID. (optional)
   * @param commentStatus Onko kohteen kommentointi käytössä.  (optional)
   * @param pingStatus Voiko kohteelle tehdä paluuviitteen. (optional)
   * @param format Kohteen muoto. (optional)
   * @param meta Metakentät. (optional)
   * @param sticky Onko kohde kiinnitetty.  (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param categories Kohteeseen liitetyt termit taksonomiassa category. (optional)
   * @param tags Kohteeseen liitetyt termit taksonomiassa post_tag. (optional)
   */
  public ApiResponse<Post> wpV2PostsIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, Integer author, String excerpt, Integer featuredMedia, String commentStatus, String pingStatus, String format, String meta, Boolean sticky, String template, List<String> categories, List<String> tags) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (author != null)
      formParams.put("author", author);
if (excerpt != null)
      formParams.put("excerpt", excerpt);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (format != null)
      formParams.put("format", format);
if (meta != null)
      formParams.put("meta", meta);
if (sticky != null)
      formParams.put("sticky", sticky);
if (template != null)
      formParams.put("template", template);
if (categories != null)
      formParams.put("categories", categories);
if (tags != null)
      formParams.put("tags", tags);
    
    String requestPath = String.format("%s/wp/v2/posts/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Post> resultType = new ResultType<Post>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<List<PostRevision>> wpV2PostsParentRevisionsGet(String parent, Integer parent2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/posts/{parent}/revisions"
      .replaceAll("\\{" + "parent" + "\\}", parent), baseUrl);
      
    ResultType<List<PostRevision>> resultType = new ResultType<List<PostRevision>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2PostsParentRevisionsHead(String parent, Integer parent2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/posts/{parent}/revisions"
      .replaceAll("\\{" + "parent" + "\\}", parent), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Arvon tulee olla true, koska versiot eivät tue roskakoria. (optional)
   */
  public ApiResponse<PostRevision> wpV2PostsParentRevisionsIdDelete(String parent, String id, Integer parent2, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/posts/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<PostRevision> resultType = new ResultType<PostRevision>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<PostRevision> wpV2PostsParentRevisionsIdGet(String parent, String id, Integer parent2, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/posts/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<PostRevision> resultType = new ResultType<PostRevision>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   * @param parent2 Kohteen vanhemman ID. (optional)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2PostsParentRevisionsIdHead(String parent, String id, Integer parent2, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (parent2 != null)
    queryParams.put("parent", parent2);
if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/posts/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param author Kohteen kirjoittajan ID. (optional)
   * @param excerpt Kohteen ote. (optional)
   * @param featuredMedia Kohteen artikkelikuvan ID. (optional)
   * @param commentStatus Onko kohteen kommentointi käytössä.  (optional)
   * @param pingStatus Voiko kohteelle tehdä paluuviitteen. (optional)
   * @param format Kohteen muoto. (optional)
   * @param meta Metakentät. (optional)
   * @param sticky Onko kohde kiinnitetty.  (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param categories Kohteeseen liitetyt termit taksonomiassa category. (optional)
   * @param tags Kohteeseen liitetyt termit taksonomiassa post_tag. (optional)
   */
  public ApiResponse<Post> wpV2PostsPost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, Integer author, String excerpt, Integer featuredMedia, String commentStatus, String pingStatus, String format, String meta, Boolean sticky, String template, List<String> categories, List<String> tags) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (author != null)
      formParams.put("author", author);
if (excerpt != null)
      formParams.put("excerpt", excerpt);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (format != null)
      formParams.put("format", format);
if (meta != null)
      formParams.put("meta", meta);
if (sticky != null)
      formParams.put("sticky", sticky);
if (template != null)
      formParams.put("template", template);
if (categories != null)
      formParams.put("categories", categories);
if (tags != null)
      formParams.put("tags", tags);
    
    String requestPath = String.format("%s/wp/v2/posts", baseUrl);
      
    ResultType<Post> resultType = new ResultType<Post>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   */
  public ApiResponse<List<Settings>> wpV2SettingsGet() {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/wp/v2/settings", baseUrl);
      
    ResultType<List<Settings>> resultType = new ResultType<List<Settings>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   */
  public ApiResponse<Object> wpV2SettingsHead() {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/wp/v2/settings", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param title Sivuston otsikko. (optional)
   * @param description Sivun kuvaus. (optional)
   * @param url Sivuston URL. (optional)
   * @param email Tätä osoitetta käytetään ylläpidon tehtäviin, kuten uusien käyttäjien rekisteröitymisilmoituksiin. (optional)
   * @param timezone Kaupunki samassa aikavyöhykkeessä kuin sinä. (optional)
   * @param dateFormat Muoto kaikille päivämäärän merkkijonoille. (optional)
   * @param timeFormat Muoto kaikille kellonajan merkkijonoille. (optional)
   * @param startOfWeek Viikonpäivän numero josta viikko alkaa. (optional)
   * @param language WordPressin kieli- ja maakoodi. (optional)
   * @param useSmilies Muunna hymiöt kuviksi. (optional)
   * @param defaultCategory Oletuskategoria artikkeleille. (optional)
   * @param defaultPostFormat Artikkelisivujen oletusmuoto. (optional)
   * @param postsPerPage Näytä enintään (optional)
   * @param defaultPingStatus Salli linkki-ilmoitukset muista blogeista (pingback ja trackback) uusiin artikkeleihin. (optional)
   * @param defaultCommentStatus Salli uusien artikkelien kommentointi.  (optional)
   */
  public ApiResponse<Settings> wpV2SettingsPost(String title, String description, String url, String email, String timezone, String dateFormat, String timeFormat, Integer startOfWeek, String language, Boolean useSmilies, Integer defaultCategory, String defaultPostFormat, Integer postsPerPage, String defaultPingStatus, String defaultCommentStatus) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (title != null)
      formParams.put("title", title);
if (description != null)
      formParams.put("description", description);
if (url != null)
      formParams.put("url", url);
if (email != null)
      formParams.put("email", email);
if (timezone != null)
      formParams.put("timezone", timezone);
if (dateFormat != null)
      formParams.put("date_format", dateFormat);
if (timeFormat != null)
      formParams.put("time_format", timeFormat);
if (startOfWeek != null)
      formParams.put("start_of_week", startOfWeek);
if (language != null)
      formParams.put("language", language);
if (useSmilies != null)
      formParams.put("use_smilies", useSmilies);
if (defaultCategory != null)
      formParams.put("default_category", defaultCategory);
if (defaultPostFormat != null)
      formParams.put("default_post_format", defaultPostFormat);
if (postsPerPage != null)
      formParams.put("posts_per_page", postsPerPage);
if (defaultPingStatus != null)
      formParams.put("default_ping_status", defaultPingStatus);
if (defaultCommentStatus != null)
      formParams.put("default_comment_status", defaultCommentStatus);
    
    String requestPath = String.format("%s/wp/v2/settings", baseUrl);
      
    ResultType<Settings> resultType = new ResultType<Settings>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<List<Shortlink>> wpV2ShortlinkGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/shortlink", baseUrl);
      
    ResultType<List<Shortlink>> resultType = new ResultType<List<Shortlink>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<Object> wpV2ShortlinkHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/shortlink", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Shortlink> wpV2ShortlinkIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/shortlink/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Shortlink> resultType = new ResultType<Shortlink>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Shortlink> wpV2ShortlinkIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/shortlink/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Shortlink> resultType = new ResultType<Shortlink>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2ShortlinkIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/shortlink/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param path Shortlink path (optional)
   * @param url Shortlink URL (optional)
   */
  public ApiResponse<Shortlink> wpV2ShortlinkIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String template, String path, String url) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (template != null)
      formParams.put("template", template);
if (path != null)
      formParams.put("path", path);
if (url != null)
      formParams.put("url", url);
    
    String requestPath = String.format("%s/wp/v2/shortlink/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Shortlink> resultType = new ResultType<Shortlink>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param path Shortlink path (optional)
   * @param url Shortlink URL (optional)
   */
  public ApiResponse<Shortlink> wpV2ShortlinkPost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String template, String path, String url) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (template != null)
      formParams.put("template", template);
if (path != null)
      formParams.put("path", path);
if (url != null)
      formParams.put("url", url);
    
    String requestPath = String.format("%s/wp/v2/shortlink", baseUrl);
      
    ResultType<Shortlink> resultType = new ResultType<Shortlink>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<List<Status>> wpV2StatusesGet(String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/statuses", baseUrl);
      
    ResultType<List<Status>> resultType = new ResultType<List<Status>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2StatusesHead(String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/statuses", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param status  (required)
   * @param status2 Alfanumeerinen tunniste tilalle. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Status> wpV2StatusesStatusGet(String status, String status2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (status2 != null)
    queryParams.put("status", status2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/statuses/{status}"
      .replaceAll("\\{" + "status" + "\\}", status), baseUrl);
      
    ResultType<Status> resultType = new ResultType<Status>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param status  (required)
   * @param status2 Alfanumeerinen tunniste tilalle. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2StatusesStatusHead(String status, String status2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (status2 != null)
    queryParams.put("status", status2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/statuses/{status}"
      .replaceAll("\\{" + "status" + "\\}", status), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to asc)
   * @param orderby Lajittele kokoelma termin ominaisuuden mukaan. (optional, default to name)
   * @param hideEmpty Piilotetaanko termit, jotka eivät liity mihinkään artikkeliin? (optional)
   * @param post Rajaa tulokset termeihin, jotka liittyvät tiettyyn artikkeliin. (optional)
   * @param slug Rajaa tulokset tietyn polkutunnuksen mukaan. (optional)
   */
  public ApiResponse<List<Tag>> wpV2TagsGet(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer post, List<String> slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (hideEmpty != null)
    queryParams.put("hide_empty", hideEmpty);
if (post != null)
    queryParams.put("post", post);
if (slug != null)
    queryParams.put("slug", slug);
    
        
    String requestPath = String.format("%s/wp/v2/tags", baseUrl);
      
    ResultType<List<Tag>> resultType = new ResultType<List<Tag>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to asc)
   * @param orderby Lajittele kokoelma termin ominaisuuden mukaan. (optional, default to name)
   * @param hideEmpty Piilotetaanko termit, jotka eivät liity mihinkään artikkeliin? (optional)
   * @param post Rajaa tulokset termeihin, jotka liittyvät tiettyyn artikkeliin. (optional)
   * @param slug Rajaa tulokset tietyn polkutunnuksen mukaan. (optional)
   */
  public ApiResponse<Object> wpV2TagsHead(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer post, List<String> slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (hideEmpty != null)
    queryParams.put("hide_empty", hideEmpty);
if (post != null)
    queryParams.put("post", post);
if (slug != null)
    queryParams.put("slug", slug);
    
        
    String requestPath = String.format("%s/wp/v2/tags", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param force Arvon tulee olla true, koska termit eivät tue roskakoria. (optional)
   */
  public ApiResponse<Tag> wpV2TagsIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/tags/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tag> resultType = new ResultType<Tag>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Tag> wpV2TagsIdGet(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/tags/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tag> resultType = new ResultType<Tag>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2TagsIdHead(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/tags/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Yksilöivä tunniste termille. (optional)
   * @param description Termin kuvaus HTML-muodossa. (optional)
   * @param name HTML-muotoiltu otsikko termille. (optional)
   * @param slug Termin alfanumeerinen tunniste joka on saman lajin sisällä yksilöivä. (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<Tag> wpV2TagsIdPost(String id, Integer id2, String description, String name, String slug, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/tags/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tag> resultType = new ResultType<Tag>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param name HTML-muotoiltu otsikko termille. (required)
   * @param description Termin kuvaus HTML-muodossa. (optional)
   * @param slug Termin alfanumeerinen tunniste joka on saman lajin sisällä yksilöivä. (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<Tag> wpV2TagsPost(String name, String description, String slug, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/tags", baseUrl);
      
    ResultType<Tag> resultType = new ResultType<Tag>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param type Rajaa tuloksiin taksonomioihin, jotka liittyvät tiettyyn sisältötyyppiin. (optional)
   */
  public ApiResponse<List<Taxonomy>> wpV2TaxonomiesGet(String context, String type) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (type != null)
    queryParams.put("type", type);
    
        
    String requestPath = String.format("%s/wp/v2/taxonomies", baseUrl);
      
    ResultType<List<Taxonomy>> resultType = new ResultType<List<Taxonomy>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param type Rajaa tuloksiin taksonomioihin, jotka liittyvät tiettyyn sisältötyyppiin. (optional)
   */
  public ApiResponse<Object> wpV2TaxonomiesHead(String context, String type) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (type != null)
    queryParams.put("type", type);
    
        
    String requestPath = String.format("%s/wp/v2/taxonomies", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param taxonomy  (required)
   * @param taxonomy2 Alfanumeerinen tunniste taksonomialle. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Taxonomy> wpV2TaxonomiesTaxonomyGet(String taxonomy, String taxonomy2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (taxonomy2 != null)
    queryParams.put("taxonomy", taxonomy2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/taxonomies/{taxonomy}"
      .replaceAll("\\{" + "taxonomy" + "\\}", taxonomy), baseUrl);
      
    ResultType<Taxonomy> resultType = new ResultType<Taxonomy>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param taxonomy  (required)
   * @param taxonomy2 Alfanumeerinen tunniste taksonomialle. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2TaxonomiesTaxonomyHead(String taxonomy, String taxonomy2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (taxonomy2 != null)
    queryParams.put("taxonomy", taxonomy2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/taxonomies/{taxonomy}"
      .replaceAll("\\{" + "taxonomy" + "\\}", taxonomy), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<List<Tile>> wpV2TileGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/tile", baseUrl);
      
    ResultType<List<Tile>> resultType = new ResultType<List<Tile>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param after Rajoita tulokset artikkeleihin, jotka on julkaistu annetun ISO8601-yhteensopivan päivämäärän jälkeen. (optional)
   * @param before Rajoita tulokset artikkeleihin, jotka on julkaistu annettua ISO8601-yhteensopivaa päivämäärää ennen. (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to desc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to date)
   * @param slug Rajaa tulokset artikkeleihin joilla on yksi tai useampi polkutunnus. (optional)
   * @param status Rajaa tulokset artikkeleihin, joilla yksi tai useampi tila. (optional, default to publish)
   */
  public ApiResponse<Object> wpV2TileHead(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> status) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
    
        
    String requestPath = String.format("%s/wp/v2/tile", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param force Ohitetaanko roskakori ja pakotetaan poistaminen. (optional)
   */
  public ApiResponse<Tile> wpV2TileIdDelete(String id, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
    
        
    String requestPath = String.format("%s/wp/v2/tile/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tile> resultType = new ResultType<Tile>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Tile> wpV2TileIdGet(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/tile/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tile> resultType = new ResultType<Tile>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param password Artikkelin salasana, jos se on salasanasuojattu.  (optional)
   */
  public ApiResponse<Object> wpV2TileIdHead(String id, Integer id2, String context, String password) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
if (password != null)
    queryParams.put("password", password);
    
        
    String requestPath = String.format("%s/wp/v2/tile/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Kohteen uniikki tunniste. (optional)
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param featuredMedia Kohteen artikkelikuvan ID. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param tileLink Tile link (optional)
   */
  public ApiResponse<Tile> wpV2TileIdPost(String id, Integer id2, LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, Integer featuredMedia, String template, String tileLink) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (template != null)
      formParams.put("template", template);
if (tileLink != null)
      formParams.put("tile-link", tileLink);
    
    String requestPath = String.format("%s/wp/v2/tile/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tile> resultType = new ResultType<Tile>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date Ajankohta kun kohde julkaistiin sivuston aikavyöhykkeen ajassa. (optional)
   * @param dateGmt Ajankohta kun kohde julkaistiin GMT-ajassa. (optional)
   * @param slug Kohteen tyypilleen uniikki alfanumeerinen tunniste. (optional)
   * @param status Kohteen nimetty tila. (optional)
   * @param password Salasana sisällön ja otteen suojaamiseksi.  (optional)
   * @param title Kohteen otsikko.  (optional)
   * @param content Kohteen sisältö. (optional)
   * @param featuredMedia Kohteen artikkelikuvan ID. (optional)
   * @param template Teematiedosto joka näyttää kohteen. (optional)
   * @param tileLink Tile link (optional)
   */
  public ApiResponse<Tile> wpV2TilePost(LocalDateTime date, LocalDateTime dateGmt, String slug, String status, String password, String title, String content, Integer featuredMedia, String template, String tileLink) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (password != null)
      formParams.put("password", password);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (template != null)
      formParams.put("template", template);
if (tileLink != null)
      formParams.put("tile-link", tileLink);
    
    String requestPath = String.format("%s/wp/v2/tile", baseUrl);
      
    ResultType<Tile> resultType = new ResultType<Tile>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<List<Type>> wpV2TypesGet(String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/types", baseUrl);
      
    ResultType<List<Type>> resultType = new ResultType<List<Type>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2TypesHead(String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/types", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param type  (required)
   * @param type2 Alfanumeerinen tunniste sisältötyypille. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Type> wpV2TypesTypeGet(String type, String type2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (type2 != null)
    queryParams.put("type", type2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/types/{type}"
      .replaceAll("\\{" + "type" + "\\}", type), baseUrl);
      
    ResultType<Type> resultType = new ResultType<Type>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param type  (required)
   * @param type2 Alfanumeerinen tunniste sisältötyypille. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2TypesTypeHead(String type, String type2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (type2 != null)
    queryParams.put("type", type2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/types/{type}"
      .replaceAll("\\{" + "type" + "\\}", type), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to asc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to name)
   * @param slug Rajaa tulokset käyttäjiin tietyllä polkutunnuksella. (optional)
   * @param roles Rajaa tulokset koskemaan vähintään yhtä annettua roolia. Hyväksyy csv-luettelon tai yksittäisen roolin. (optional)
   */
  public ApiResponse<List<User>> wpV2UsersGet(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> roles) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (roles != null)
    queryParams.put("roles", roles);
    
        
    String requestPath = String.format("%s/wp/v2/users", baseUrl);
      
    ResultType<List<User>> resultType = new ResultType<List<User>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   * @param page Kokoelman nykyinen sivu. (optional, default to 1)
   * @param perPage Enimmäismäärä haun palauttamia tuloksia. (optional, default to 10)
   * @param search Rajaa tulokset niihin, jotka täsmäävät merkkijonoon.  (optional)
   * @param exclude Varmista, etteivät tulokset sisällä tiettyjä ID:itä. (optional)
   * @param include Rajaa tulokset tiettyihin ID:ihin. (optional)
   * @param offset Ohita määritelty määrä kohteita alusta. (optional)
   * @param order Järjestää tulokset nousevaan tai laskevaan järjestykseen. (optional, default to asc)
   * @param orderby Järjestä kokoelma kohteen ominaisuuden mukaan. (optional, default to name)
   * @param slug Rajaa tulokset käyttäjiin tietyllä polkutunnuksella. (optional)
   * @param roles Rajaa tulokset koskemaan vähintään yhtä annettua roolia. Hyväksyy csv-luettelon tai yksittäisen roolin. (optional)
   */
  public ApiResponse<Object> wpV2UsersHead(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> slug, List<String> roles) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (roles != null)
    queryParams.put("roles", roles);
    
        
    String requestPath = String.format("%s/wp/v2/users", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param reassign Merkitse poistetun käyttäjän artikkelit ja linkit tälle käyttäjä-ID:lle. (required)
   * @param id2 Käyttäjän uniikki tunniste. (optional)
   * @param force Arvon on oltava tosi, koska käyttäjät eivät tue roskakori-toimintoa. (optional)
   */
  public ApiResponse<User> wpV2UsersIdDelete(String id, Integer reassign, Integer id2, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (force != null)
    queryParams.put("force", force);
if (reassign != null)
    queryParams.put("reassign", reassign);
    
        
    String requestPath = String.format("%s/wp/v2/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Käyttäjän uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<User> wpV2UsersIdGet(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Käyttäjän uniikki tunniste. (optional)
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2UsersIdHead(String id, Integer id2, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (id2 != null)
    queryParams.put("id", id2);
if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param id2 Käyttäjän uniikki tunniste. (optional)
   * @param username Käyttäjän käyttäjätunnus. (optional)
   * @param name Käyttäjän näyttönimi. (optional)
   * @param firstName Käyttäjän etunimi. (optional)
   * @param lastName Käyttäjän sukunimi. (optional)
   * @param email Käyttäjän sähköpostiosoite. (optional)
   * @param url Käyttäjän URL-osoite. (optional)
   * @param description Käyttäjän kuvaus. (optional)
   * @param locale Käyttäjän kieli. (optional)
   * @param nickname Käyttäjän lempinimi. (optional)
   * @param slug Käyttäjän alfanumeerinen tunniste. (optional)
   * @param roles Käyttäjälle asetetut roolit. (optional)
   * @param password Käyttäjän salasana (ei koskaan sisälly). (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<User> wpV2UsersIdPost(String id, Integer id2, String username, String name, String firstName, String lastName, String email, String url, String description, String locale, String nickname, String slug, List<String> roles, String password, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (id2 != null)
      formParams.put("id", id2);
if (username != null)
      formParams.put("username", username);
if (name != null)
      formParams.put("name", name);
if (firstName != null)
      formParams.put("first_name", firstName);
if (lastName != null)
      formParams.put("last_name", lastName);
if (email != null)
      formParams.put("email", email);
if (url != null)
      formParams.put("url", url);
if (description != null)
      formParams.put("description", description);
if (locale != null)
      formParams.put("locale", locale);
if (nickname != null)
      formParams.put("nickname", nickname);
if (slug != null)
      formParams.put("slug", slug);
if (roles != null)
      formParams.put("roles", roles);
if (password != null)
      formParams.put("password", password);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param reassign Merkitse poistetun käyttäjän artikkelit ja linkit tälle käyttäjä-ID:lle. (required)
   * @param force Arvon on oltava tosi, koska käyttäjät eivät tue roskakori-toimintoa. (optional)
   */
  public ApiResponse<User> wpV2UsersMeDelete(Integer reassign, Boolean force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
if (reassign != null)
    queryParams.put("reassign", reassign);
    
        
    String requestPath = String.format("%s/wp/v2/users/me", baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doDELETERequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<List<User>> wpV2UsersMeGet(String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/users/me", baseUrl);
      
    ResultType<List<User>> resultType = new ResultType<List<User>>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Pyynnön konteksti määrää mitä kenttiä vastauksessa on mukana. (optional, default to view)
   */
  public ApiResponse<Object> wpV2UsersMeHead(String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String requestPath = String.format("%s/wp/v2/users/me", baseUrl);
      
    ResultType<Object> resultType = new ResultType<Object>() {};
    return client.doHEADRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param username Käyttäjän käyttäjätunnus. (optional)
   * @param name Käyttäjän näyttönimi. (optional)
   * @param firstName Käyttäjän etunimi. (optional)
   * @param lastName Käyttäjän sukunimi. (optional)
   * @param email Käyttäjän sähköpostiosoite. (optional)
   * @param url Käyttäjän URL-osoite. (optional)
   * @param description Käyttäjän kuvaus. (optional)
   * @param locale Käyttäjän kieli. (optional)
   * @param nickname Käyttäjän lempinimi. (optional)
   * @param slug Käyttäjän alfanumeerinen tunniste. (optional)
   * @param roles Käyttäjälle asetetut roolit. (optional)
   * @param password Käyttäjän salasana (ei koskaan sisälly). (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<User> wpV2UsersMePost(String username, String name, String firstName, String lastName, String email, String url, String description, String locale, String nickname, String slug, List<String> roles, String password, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (username != null)
      formParams.put("username", username);
if (name != null)
      formParams.put("name", name);
if (firstName != null)
      formParams.put("first_name", firstName);
if (lastName != null)
      formParams.put("last_name", lastName);
if (email != null)
      formParams.put("email", email);
if (url != null)
      formParams.put("url", url);
if (description != null)
      formParams.put("description", description);
if (locale != null)
      formParams.put("locale", locale);
if (nickname != null)
      formParams.put("nickname", nickname);
if (slug != null)
      formParams.put("slug", slug);
if (roles != null)
      formParams.put("roles", roles);
if (password != null)
      formParams.put("password", password);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/users/me", baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param username Käyttäjän käyttäjätunnus. (required)
   * @param email Käyttäjän sähköpostiosoite. (required)
   * @param password Käyttäjän salasana (ei koskaan sisälly). (required)
   * @param name Käyttäjän näyttönimi. (optional)
   * @param firstName Käyttäjän etunimi. (optional)
   * @param lastName Käyttäjän sukunimi. (optional)
   * @param url Käyttäjän URL-osoite. (optional)
   * @param description Käyttäjän kuvaus. (optional)
   * @param locale Käyttäjän kieli. (optional)
   * @param nickname Käyttäjän lempinimi. (optional)
   * @param slug Käyttäjän alfanumeerinen tunniste. (optional)
   * @param roles Käyttäjälle asetetut roolit. (optional)
   * @param meta Metakentät. (optional)
   */
  public ApiResponse<User> wpV2UsersPost(String username, String email, String password, String name, String firstName, String lastName, String url, String description, String locale, String nickname, String slug, List<String> roles, String meta) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (username != null)
      formParams.put("username", username);
if (name != null)
      formParams.put("name", name);
if (firstName != null)
      formParams.put("first_name", firstName);
if (lastName != null)
      formParams.put("last_name", lastName);
if (email != null)
      formParams.put("email", email);
if (url != null)
      formParams.put("url", url);
if (description != null)
      formParams.put("description", description);
if (locale != null)
      formParams.put("locale", locale);
if (nickname != null)
      formParams.put("nickname", nickname);
if (slug != null)
      formParams.put("slug", slug);
if (roles != null)
      formParams.put("roles", roles);
if (password != null)
      formParams.put("password", password);
if (meta != null)
      formParams.put("meta", meta);
    
    String requestPath = String.format("%s/wp/v2/users", baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doPOSTRequest(requestPath, resultType, queryParams, formParams);
  }
  
}
