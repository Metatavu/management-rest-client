/**
 * manage.kunta-api.dev
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fi.metatavu.management.client;

import fi.metatavu.management.client.model.*;

import fi.metatavu.management.client.model.Error;
import fi.metatavu.management.client.model.Menu;
import fi.metatavu.management.client.model.Menuitem;
import java.time.LocalDateTime;
import fi.metatavu.management.client.model.Announcement;
import fi.metatavu.management.client.model.Banner;
import fi.metatavu.management.client.model.Category;
import fi.metatavu.management.client.model.Comment;
import fi.metatavu.management.client.model.Attachment;
import fi.metatavu.management.client.model.Page;
import fi.metatavu.management.client.model.PageRevision;
import fi.metatavu.management.client.model.Post;
import fi.metatavu.management.client.model.PostRevision;
import fi.metatavu.management.client.model.Status;
import fi.metatavu.management.client.model.Tag;
import fi.metatavu.management.client.model.Taxonomy;
import fi.metatavu.management.client.model.Tile;
import fi.metatavu.management.client.model.Type;
import fi.metatavu.management.client.model.User;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-12-02T14:12:08.234+02:00")
public class DefaultApi {

  private ApiClient client;
  private String baseUrl;

  public DefaultApi(String baseUrl, ApiClient client) {
    this.client = client;
    this.baseUrl = baseUrl;
  }
  
  /**
   * 
   * 
   * @param slug  (optional)
   */
  public ApiResponse<List<Menu>> kuntaApiMenusGet(String slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (slug != null)
    queryParams.put("slug", slug);
    
        
    String path = String.format("%s/kunta-api/menus", baseUrl);
      
    ResultType<List<Menu>> resultType = new ResultType<List<Menu>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   */
  public ApiResponse<Menu> kuntaApiMenusIdGet(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = String.format("%s/kunta-api/menus/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Menu> resultType = new ResultType<Menu>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param menuId  (required)
   */
  public ApiResponse<List<Menuitem>> kuntaApiMenusMenuIdItemsGet(String menuId) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = String.format("%s/kunta-api/menus/{menuId}/items"
      .replaceAll("\\{" + "menuId" + "\\}", menuId), baseUrl);
      
    ResultType<List<Menuitem>> resultType = new ResultType<List<Menuitem>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
   * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param offset Offset the result set by a specific number of items. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to desc)
   * @param orderby Sort collection by object attribute. (optional, default to date)
   * @param slug Limit result set to posts with a specific slug. (optional)
   * @param status Limit result set to posts assigned a specific status. (optional, default to publish)
   * @param filter Use WP Query arguments to modify the response; private query vars require appropriate authorization. (optional)
   */
  public ApiResponse<List<Announcement>> wpV2AnnouncementGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, String slug, String status, String filter) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (filter != null)
    queryParams.put("filter", filter);
    
        
    String path = String.format("%s/wp/v2/announcement", baseUrl);
      
    ResultType<List<Announcement>> resultType = new ResultType<List<Announcement>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Whether to bypass trash and force deletion. (optional)
   */
  public ApiResponse<Announcement> wpV2AnnouncementIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/announcement/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Announcement> resultType = new ResultType<Announcement>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Announcement> wpV2AnnouncementIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/announcement/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Announcement> resultType = new ResultType<Announcement>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   */
  public ApiResponse<Announcement> wpV2AnnouncementIdPost(String id, LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, String content) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
    
    String path = String.format("%s/wp/v2/announcement/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Announcement> resultType = new ResultType<Announcement>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   */
  public ApiResponse<Announcement> wpV2AnnouncementPost(LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, String content) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
    
    String path = String.format("%s/wp/v2/announcement", baseUrl);
      
    ResultType<Announcement> resultType = new ResultType<Announcement>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
   * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param offset Offset the result set by a specific number of items. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to desc)
   * @param orderby Sort collection by object attribute. (optional, default to date)
   * @param slug Limit result set to posts with a specific slug. (optional)
   * @param status Limit result set to posts assigned a specific status. (optional, default to publish)
   * @param filter Use WP Query arguments to modify the response; private query vars require appropriate authorization. (optional)
   */
  public ApiResponse<List<Banner>> wpV2BannerGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, String slug, String status, String filter) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (filter != null)
    queryParams.put("filter", filter);
    
        
    String path = String.format("%s/wp/v2/banner", baseUrl);
      
    ResultType<List<Banner>> resultType = new ResultType<List<Banner>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Whether to bypass trash and force deletion. (optional)
   */
  public ApiResponse<Banner> wpV2BannerIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/banner/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Banner> resultType = new ResultType<Banner>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Banner> wpV2BannerIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/banner/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Banner> resultType = new ResultType<Banner>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   * @param featuredMedia The id of the featured media for the object. (optional)
   */
  public ApiResponse<Banner> wpV2BannerIdPost(String id, LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, String content, Integer featuredMedia) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
    
    String path = String.format("%s/wp/v2/banner/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Banner> resultType = new ResultType<Banner>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   * @param featuredMedia The id of the featured media for the object. (optional)
   */
  public ApiResponse<Banner> wpV2BannerPost(LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, String content, Integer featuredMedia) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
    
    String path = String.format("%s/wp/v2/banner", baseUrl);
      
    ResultType<Banner> resultType = new ResultType<Banner>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to asc)
   * @param orderby Sort collection by resource attribute. (optional, default to name)
   * @param hideEmpty Whether to hide resources not assigned to any posts. (optional)
   * @param parent Limit result set to resources assigned to a specific parent. (optional)
   * @param post Limit result set to resources assigned to a specific post. (optional)
   * @param slug Limit result set to resources with a specific slug. (optional)
   */
  public ApiResponse<List<Category>> wpV2CategoriesGet(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, String order, String orderby, Boolean hideEmpty, Integer parent, Integer post, String slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (hideEmpty != null)
    queryParams.put("hide_empty", hideEmpty);
if (parent != null)
    queryParams.put("parent", parent);
if (post != null)
    queryParams.put("post", post);
if (slug != null)
    queryParams.put("slug", slug);
    
        
    String path = String.format("%s/wp/v2/categories", baseUrl);
      
    ResultType<List<Category>> resultType = new ResultType<List<Category>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Required to be true, as resource does not support trashing. (optional)
   */
  public ApiResponse<Category> wpV2CategoriesIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/categories/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Category> resultType = new ResultType<Category>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Category> wpV2CategoriesIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/categories/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Category> resultType = new ResultType<Category>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param description HTML description of the resource. (optional)
   * @param name HTML title for the resource. (optional)
   * @param slug An alphanumeric identifier for the resource unique to its type. (optional)
   * @param parent The id for the parent of the resource. (optional)
   */
  public ApiResponse<Category> wpV2CategoriesIdPost(String id, String description, String name, String slug, Integer parent) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
if (parent != null)
      formParams.put("parent", parent);
    
    String path = String.format("%s/wp/v2/categories/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Category> resultType = new ResultType<Category>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param name HTML title for the resource. (required)
   * @param description HTML description of the resource. (optional)
   * @param slug An alphanumeric identifier for the resource unique to its type. (optional)
   * @param parent The id for the parent of the resource. (optional)
   */
  public ApiResponse<Category> wpV2CategoriesPost(String name, String description, String slug, Integer parent) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
if (parent != null)
      formParams.put("parent", parent);
    
    String path = String.format("%s/wp/v2/categories", baseUrl);
      
    ResultType<Category> resultType = new ResultType<Category>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
   * @param author Limit result set to comments assigned to specific user ids. Requires authorization. (optional)
   * @param authorExclude Ensure result set excludes comments assigned to specific user ids. Requires authorization. (optional)
   * @param authorEmail Limit result set to that from a specific author email. Requires authorization. (optional)
   * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param karma Limit result set to that of a particular comment karma. Requires authorization. (optional)
   * @param offset Offset the result set by a specific number of comments. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to asc)
   * @param orderby Sort collection by object attribute. (optional, default to date_gmt)
   * @param parent Limit result set to resources of specific parent ids. (optional)
   * @param parentExclude Ensure result set excludes specific parent ids. (optional)
   * @param post Limit result set to resources assigned to specific post ids. (optional)
   * @param status Limit result set to comments assigned a specific status. Requires authorization. (optional, default to approve)
   * @param type Limit result set to comments assigned a specific type. Requires authorization. (optional, default to comment)
   */
  public ApiResponse<List<Comment>> wpV2CommentsGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, String authorEmail, LocalDateTime before, List<String> exclude, List<String> include, Integer karma, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, List<String> post, String status, String type) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (authorEmail != null)
    queryParams.put("author_email", authorEmail);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (karma != null)
    queryParams.put("karma", karma);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (post != null)
    queryParams.put("post", post);
if (status != null)
    queryParams.put("status", status);
if (type != null)
    queryParams.put("type", type);
    
        
    String path = String.format("%s/wp/v2/comments", baseUrl);
      
    ResultType<List<Comment>> resultType = new ResultType<List<Comment>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Whether to bypass trash and force deletion. (optional)
   */
  public ApiResponse<Comment> wpV2CommentsIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/comments/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Comment> resultType = new ResultType<Comment>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Comment> wpV2CommentsIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/comments/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Comment> resultType = new ResultType<Comment>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param author The id of the user object, if author was a user. (optional)
   * @param authorEmail Email address for the object author. (optional)
   * @param authorName Display name for the object author. (optional)
   * @param authorUrl URL for the object author. (optional)
   * @param content The content for the object. (optional)
   * @param date The date the object was published. (optional)
   * @param dateGmt The date the object was published as GMT. (optional)
   * @param karma Karma for the object. (optional)
   * @param parent The id for the parent of the object. (optional)
   * @param post The id of the associated post object. (optional)
   * @param status State of the object. (optional)
   * @param type Type of Comment for the object. (optional)
   */
  public ApiResponse<Comment> wpV2CommentsIdPost(String id, Integer author, String authorEmail, String authorName, String authorUrl, String content, LocalDateTime date, LocalDateTime dateGmt, Integer karma, Integer parent, Integer post, String status, String type) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (author != null)
      formParams.put("author", author);
if (authorEmail != null)
      formParams.put("author_email", authorEmail);
if (authorName != null)
      formParams.put("author_name", authorName);
if (authorUrl != null)
      formParams.put("author_url", authorUrl);
if (content != null)
      formParams.put("content", content);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (karma != null)
      formParams.put("karma", karma);
if (parent != null)
      formParams.put("parent", parent);
if (post != null)
      formParams.put("post", post);
if (status != null)
      formParams.put("status", status);
if (type != null)
      formParams.put("type", type);
    
    String path = String.format("%s/wp/v2/comments/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Comment> resultType = new ResultType<Comment>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param author The id of the user object, if author was a user. (optional)
   * @param authorEmail Email address for the object author. (optional)
   * @param authorName Display name for the object author. (optional)
   * @param authorUrl URL for the object author. (optional)
   * @param content The content for the object. (optional)
   * @param date The date the object was published. (optional)
   * @param dateGmt The date the object was published as GMT. (optional)
   * @param karma Karma for the object. (optional)
   * @param parent The id for the parent of the object. (optional)
   * @param post The id of the associated post object. (optional)
   * @param status State of the object. (optional)
   * @param type Type of Comment for the object. (optional)
   */
  public ApiResponse<Comment> wpV2CommentsPost(Integer author, String authorEmail, String authorName, String authorUrl, String content, LocalDateTime date, LocalDateTime dateGmt, Integer karma, Integer parent, Integer post, String status, String type) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (author != null)
      formParams.put("author", author);
if (authorEmail != null)
      formParams.put("author_email", authorEmail);
if (authorName != null)
      formParams.put("author_name", authorName);
if (authorUrl != null)
      formParams.put("author_url", authorUrl);
if (content != null)
      formParams.put("content", content);
if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (karma != null)
      formParams.put("karma", karma);
if (parent != null)
      formParams.put("parent", parent);
if (post != null)
      formParams.put("post", post);
if (status != null)
      formParams.put("status", status);
if (type != null)
      formParams.put("type", type);
    
    String path = String.format("%s/wp/v2/comments", baseUrl);
      
    ResultType<Comment> resultType = new ResultType<Comment>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
   * @param author Limit result set to posts assigned to specific authors. (optional)
   * @param authorExclude Ensure result set excludes posts assigned to specific authors. (optional)
   * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param offset Offset the result set by a specific number of items. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to desc)
   * @param orderby Sort collection by object attribute. (optional, default to date)
   * @param parent Limit result set to those of particular parent ids. (optional)
   * @param parentExclude Limit result set to all items except those of a particular parent id. (optional)
   * @param slug Limit result set to posts with a specific slug. (optional)
   * @param status Limit result set to posts assigned a specific status. (optional, default to inherit)
   * @param filter Use WP Query arguments to modify the response; private query vars require appropriate authorization. (optional)
   * @param mediaType Limit result set to attachments of a particular media type. (optional)
   * @param mimeType Limit result set to attachments of a particular mime type. (optional)
   */
  public ApiResponse<List<Attachment>> wpV2MediaGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, String slug, String status, String filter, String mediaType, String mimeType) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (filter != null)
    queryParams.put("filter", filter);
if (mediaType != null)
    queryParams.put("media_type", mediaType);
if (mimeType != null)
    queryParams.put("mime_type", mimeType);
    
        
    String path = String.format("%s/wp/v2/media", baseUrl);
      
    ResultType<List<Attachment>> resultType = new ResultType<List<Attachment>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Whether to bypass trash and force deletion. (optional)
   */
  public ApiResponse<Attachment> wpV2MediaIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/media/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Attachment> resultType = new ResultType<Attachment>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Attachment> wpV2MediaIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/media/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Attachment> resultType = new ResultType<Attachment>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param author The id for the author of the object. (optional)
   * @param commentStatus Whether or not comments are open on the object. (optional)
   * @param pingStatus Whether or not the object can be pinged. (optional)
   * @param altText Alternative text to display when resource is not displayed. (optional)
   * @param caption The caption for the resource. (optional)
   * @param description The description for the resource. (optional)
   * @param post The id for the associated post of the resource. (optional)
   */
  public ApiResponse<Attachment> wpV2MediaIdPost(String id, LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, Integer author, String commentStatus, String pingStatus, String altText, String caption, String description, Integer post) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (author != null)
      formParams.put("author", author);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (altText != null)
      formParams.put("alt_text", altText);
if (caption != null)
      formParams.put("caption", caption);
if (description != null)
      formParams.put("description", description);
if (post != null)
      formParams.put("post", post);
    
    String path = String.format("%s/wp/v2/media/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Attachment> resultType = new ResultType<Attachment>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param author The id for the author of the object. (optional)
   * @param commentStatus Whether or not comments are open on the object. (optional)
   * @param pingStatus Whether or not the object can be pinged. (optional)
   * @param altText Alternative text to display when resource is not displayed. (optional)
   * @param caption The caption for the resource. (optional)
   * @param description The description for the resource. (optional)
   * @param post The id for the associated post of the resource. (optional)
   */
  public ApiResponse<Attachment> wpV2MediaPost(LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, Integer author, String commentStatus, String pingStatus, String altText, String caption, String description, Integer post) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (author != null)
      formParams.put("author", author);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (altText != null)
      formParams.put("alt_text", altText);
if (caption != null)
      formParams.put("caption", caption);
if (description != null)
      formParams.put("description", description);
if (post != null)
      formParams.put("post", post);
    
    String path = String.format("%s/wp/v2/media", baseUrl);
      
    ResultType<Attachment> resultType = new ResultType<Attachment>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
   * @param author Limit result set to posts assigned to specific authors. (optional)
   * @param authorExclude Ensure result set excludes posts assigned to specific authors. (optional)
   * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param menuOrder Limit result set to resources with a specific menu_order value. (optional)
   * @param offset Offset the result set by a specific number of items. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to desc)
   * @param orderby Sort collection by object attribute. (optional, default to date)
   * @param parent Limit result set to those of particular parent ids. (optional)
   * @param parentExclude Limit result set to all items except those of a particular parent id. (optional)
   * @param slug Limit result set to posts with a specific slug. (optional)
   * @param status Limit result set to posts assigned a specific status. (optional, default to publish)
   * @param filter Use WP Query arguments to modify the response; private query vars require appropriate authorization. (optional)
   */
  public ApiResponse<List<Page>> wpV2PagesGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer menuOrder, Integer offset, String order, String orderby, List<String> parent, List<String> parentExclude, String slug, String status, String filter) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (menuOrder != null)
    queryParams.put("menu_order", menuOrder);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (parent != null)
    queryParams.put("parent", parent);
if (parentExclude != null)
    queryParams.put("parent_exclude", parentExclude);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (filter != null)
    queryParams.put("filter", filter);
    
        
    String path = String.format("%s/wp/v2/pages", baseUrl);
      
    ResultType<List<Page>> resultType = new ResultType<List<Page>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Whether to bypass trash and force deletion. (optional)
   */
  public ApiResponse<Page> wpV2PagesIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/pages/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Page> resultType = new ResultType<Page>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Page> wpV2PagesIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/pages/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Page> resultType = new ResultType<Page>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param parent The id for the parent of the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   * @param author The id for the author of the object. (optional)
   * @param excerpt The excerpt for the object. (optional)
   * @param featuredMedia The id of the featured media for the object. (optional)
   * @param commentStatus Whether or not comments are open on the object. (optional)
   * @param pingStatus Whether or not the object can be pinged. (optional)
   * @param menuOrder The order of the object in relation to other object of its type. (optional)
   * @param template The theme file to use to display the object. (optional)
   */
  public ApiResponse<Page> wpV2PagesIdPost(String id, LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, Integer parent, String title, String content, Integer author, String excerpt, Integer featuredMedia, String commentStatus, String pingStatus, Integer menuOrder, String template) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (parent != null)
      formParams.put("parent", parent);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (author != null)
      formParams.put("author", author);
if (excerpt != null)
      formParams.put("excerpt", excerpt);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (menuOrder != null)
      formParams.put("menu_order", menuOrder);
if (template != null)
      formParams.put("template", template);
    
    String path = String.format("%s/wp/v2/pages/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Page> resultType = new ResultType<Page>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<List<PageRevision>> wpV2PagesParentRevisionsGet(String parent, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/pages/{parent}/revisions"
      .replaceAll("\\{" + "parent" + "\\}", parent), baseUrl);
      
    ResultType<List<PageRevision>> resultType = new ResultType<List<PageRevision>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   */
  public ApiResponse<PageRevision> wpV2PagesParentRevisionsIdDelete(String parent, String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = String.format("%s/wp/v2/pages/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<PageRevision> resultType = new ResultType<PageRevision>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<PageRevision> wpV2PagesParentRevisionsIdGet(String parent, String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/pages/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<PageRevision> resultType = new ResultType<PageRevision>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param parent The id for the parent of the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   * @param author The id for the author of the object. (optional)
   * @param excerpt The excerpt for the object. (optional)
   * @param featuredMedia The id of the featured media for the object. (optional)
   * @param commentStatus Whether or not comments are open on the object. (optional)
   * @param pingStatus Whether or not the object can be pinged. (optional)
   * @param menuOrder The order of the object in relation to other object of its type. (optional)
   * @param template The theme file to use to display the object. (optional)
   */
  public ApiResponse<Page> wpV2PagesPost(LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, Integer parent, String title, String content, Integer author, String excerpt, Integer featuredMedia, String commentStatus, String pingStatus, Integer menuOrder, String template) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (parent != null)
      formParams.put("parent", parent);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (author != null)
      formParams.put("author", author);
if (excerpt != null)
      formParams.put("excerpt", excerpt);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (menuOrder != null)
      formParams.put("menu_order", menuOrder);
if (template != null)
      formParams.put("template", template);
    
    String path = String.format("%s/wp/v2/pages", baseUrl);
      
    ResultType<Page> resultType = new ResultType<Page>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
   * @param author Limit result set to posts assigned to specific authors. (optional)
   * @param authorExclude Ensure result set excludes posts assigned to specific authors. (optional)
   * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param offset Offset the result set by a specific number of items. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to desc)
   * @param orderby Sort collection by object attribute. (optional, default to date)
   * @param slug Limit result set to posts with a specific slug. (optional)
   * @param status Limit result set to posts assigned a specific status. (optional, default to publish)
   * @param filter Use WP Query arguments to modify the response; private query vars require appropriate authorization. (optional)
   * @param categories Limit result set to all items that have the specified term assigned in the categories taxonomy. (optional)
   * @param tags Limit result set to all items that have the specified term assigned in the tags taxonomy. (optional)
   */
  public ApiResponse<List<Post>> wpV2PostsGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, List<String> author, List<String> authorExclude, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, String slug, String status, String filter, List<String> categories, List<String> tags) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (author != null)
    queryParams.put("author", author);
if (authorExclude != null)
    queryParams.put("author_exclude", authorExclude);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (filter != null)
    queryParams.put("filter", filter);
if (categories != null)
    queryParams.put("categories", categories);
if (tags != null)
    queryParams.put("tags", tags);
    
        
    String path = String.format("%s/wp/v2/posts", baseUrl);
      
    ResultType<List<Post>> resultType = new ResultType<List<Post>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Whether to bypass trash and force deletion. (optional)
   */
  public ApiResponse<Post> wpV2PostsIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/posts/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Post> resultType = new ResultType<Post>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Post> wpV2PostsIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/posts/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Post> resultType = new ResultType<Post>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   * @param author The id for the author of the object. (optional)
   * @param excerpt The excerpt for the object. (optional)
   * @param featuredMedia The id of the featured media for the object. (optional)
   * @param commentStatus Whether or not comments are open on the object. (optional)
   * @param pingStatus Whether or not the object can be pinged. (optional)
   * @param format The format for the object. (optional)
   * @param sticky Whether or not the object should be treated as sticky. (optional)
   * @param categories The terms assigned to the object in the category taxonomy. (optional)
   * @param tags The terms assigned to the object in the post_tag taxonomy. (optional)
   */
  public ApiResponse<Post> wpV2PostsIdPost(String id, LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, String content, Integer author, String excerpt, Integer featuredMedia, String commentStatus, String pingStatus, String format, Boolean sticky, List<String> categories, List<String> tags) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (author != null)
      formParams.put("author", author);
if (excerpt != null)
      formParams.put("excerpt", excerpt);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (format != null)
      formParams.put("format", format);
if (sticky != null)
      formParams.put("sticky", sticky);
if (categories != null)
      formParams.put("categories", categories);
if (tags != null)
      formParams.put("tags", tags);
    
    String path = String.format("%s/wp/v2/posts/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Post> resultType = new ResultType<Post>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<List<PostRevision>> wpV2PostsParentRevisionsGet(String parent, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/posts/{parent}/revisions"
      .replaceAll("\\{" + "parent" + "\\}", parent), baseUrl);
      
    ResultType<List<PostRevision>> resultType = new ResultType<List<PostRevision>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   */
  public ApiResponse<PostRevision> wpV2PostsParentRevisionsIdDelete(String parent, String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = String.format("%s/wp/v2/posts/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<PostRevision> resultType = new ResultType<PostRevision>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param parent  (required)
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<PostRevision> wpV2PostsParentRevisionsIdGet(String parent, String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/posts/{parent}/revisions/{id}"
      .replaceAll("\\{" + "parent" + "\\}", parent)
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<PostRevision> resultType = new ResultType<PostRevision>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   * @param author The id for the author of the object. (optional)
   * @param excerpt The excerpt for the object. (optional)
   * @param featuredMedia The id of the featured media for the object. (optional)
   * @param commentStatus Whether or not comments are open on the object. (optional)
   * @param pingStatus Whether or not the object can be pinged. (optional)
   * @param format The format for the object. (optional)
   * @param sticky Whether or not the object should be treated as sticky. (optional)
   * @param categories The terms assigned to the object in the category taxonomy. (optional)
   * @param tags The terms assigned to the object in the post_tag taxonomy. (optional)
   */
  public ApiResponse<Post> wpV2PostsPost(LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, String content, Integer author, String excerpt, Integer featuredMedia, String commentStatus, String pingStatus, String format, Boolean sticky, List<String> categories, List<String> tags) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (author != null)
      formParams.put("author", author);
if (excerpt != null)
      formParams.put("excerpt", excerpt);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
if (commentStatus != null)
      formParams.put("comment_status", commentStatus);
if (pingStatus != null)
      formParams.put("ping_status", pingStatus);
if (format != null)
      formParams.put("format", format);
if (sticky != null)
      formParams.put("sticky", sticky);
if (categories != null)
      formParams.put("categories", categories);
if (tags != null)
      formParams.put("tags", tags);
    
    String path = String.format("%s/wp/v2/posts", baseUrl);
      
    ResultType<Post> resultType = new ResultType<Post>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<List<Status>> wpV2StatusesGet(String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/statuses", baseUrl);
      
    ResultType<List<Status>> resultType = new ResultType<List<Status>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param status  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Status> wpV2StatusesStatusGet(String status, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/statuses/{status}"
      .replaceAll("\\{" + "status" + "\\}", status), baseUrl);
      
    ResultType<Status> resultType = new ResultType<Status>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param offset Offset the result set by a specific number of items. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to asc)
   * @param orderby Sort collection by resource attribute. (optional, default to name)
   * @param hideEmpty Whether to hide resources not assigned to any posts. (optional)
   * @param post Limit result set to resources assigned to a specific post. (optional)
   * @param slug Limit result set to resources with a specific slug. (optional)
   */
  public ApiResponse<List<Tag>> wpV2TagsGet(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer post, String slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (hideEmpty != null)
    queryParams.put("hide_empty", hideEmpty);
if (post != null)
    queryParams.put("post", post);
if (slug != null)
    queryParams.put("slug", slug);
    
        
    String path = String.format("%s/wp/v2/tags", baseUrl);
      
    ResultType<List<Tag>> resultType = new ResultType<List<Tag>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Required to be true, as resource does not support trashing. (optional)
   */
  public ApiResponse<Tag> wpV2TagsIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/tags/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tag> resultType = new ResultType<Tag>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Tag> wpV2TagsIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/tags/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tag> resultType = new ResultType<Tag>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param description HTML description of the resource. (optional)
   * @param name HTML title for the resource. (optional)
   * @param slug An alphanumeric identifier for the resource unique to its type. (optional)
   */
  public ApiResponse<Tag> wpV2TagsIdPost(String id, String description, String name, String slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
    
    String path = String.format("%s/wp/v2/tags/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tag> resultType = new ResultType<Tag>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param name HTML title for the resource. (required)
   * @param description HTML description of the resource. (optional)
   * @param slug An alphanumeric identifier for the resource unique to its type. (optional)
   */
  public ApiResponse<Tag> wpV2TagsPost(String name, String description, String slug) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (description != null)
      formParams.put("description", description);
if (name != null)
      formParams.put("name", name);
if (slug != null)
      formParams.put("slug", slug);
    
    String path = String.format("%s/wp/v2/tags", baseUrl);
      
    ResultType<Tag> resultType = new ResultType<Tag>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param type Limit results to resources associated with a specific post type. (optional)
   */
  public ApiResponse<List<Taxonomy>> wpV2TaxonomiesGet(String context, String type) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (type != null)
    queryParams.put("type", type);
    
        
    String path = String.format("%s/wp/v2/taxonomies", baseUrl);
      
    ResultType<List<Taxonomy>> resultType = new ResultType<List<Taxonomy>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param taxonomy  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Taxonomy> wpV2TaxonomiesTaxonomyGet(String taxonomy, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/taxonomies/{taxonomy}"
      .replaceAll("\\{" + "taxonomy" + "\\}", taxonomy), baseUrl);
      
    ResultType<Taxonomy> resultType = new ResultType<Taxonomy>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
   * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param offset Offset the result set by a specific number of items. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to desc)
   * @param orderby Sort collection by object attribute. (optional, default to date)
   * @param slug Limit result set to posts with a specific slug. (optional)
   * @param status Limit result set to posts assigned a specific status. (optional, default to publish)
   * @param filter Use WP Query arguments to modify the response; private query vars require appropriate authorization. (optional)
   */
  public ApiResponse<List<Tile>> wpV2TileGet(String context, Integer page, Integer perPage, String search, LocalDateTime after, LocalDateTime before, List<String> exclude, List<String> include, Integer offset, String order, String orderby, String slug, String status, String filter) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (after != null)
    queryParams.put("after", after);
if (before != null)
    queryParams.put("before", before);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (status != null)
    queryParams.put("status", status);
if (filter != null)
    queryParams.put("filter", filter);
    
        
    String path = String.format("%s/wp/v2/tile", baseUrl);
      
    ResultType<List<Tile>> resultType = new ResultType<List<Tile>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Whether to bypass trash and force deletion. (optional)
   */
  public ApiResponse<Tile> wpV2TileIdDelete(String id, String force) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
    
        
    String path = String.format("%s/wp/v2/tile/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tile> resultType = new ResultType<Tile>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Tile> wpV2TileIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/tile/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tile> resultType = new ResultType<Tile>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   * @param featuredMedia The id of the featured media for the object. (optional)
   */
  public ApiResponse<Tile> wpV2TileIdPost(String id, LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, String content, Integer featuredMedia) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
    
    String path = String.format("%s/wp/v2/tile/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Tile> resultType = new ResultType<Tile>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param date The date the object was published, in the site&#39;s timezone. (optional)
   * @param dateGmt The date the object was published, as GMT. (optional)
   * @param password A password to protect access to the post. (optional)
   * @param slug An alphanumeric identifier for the object unique to its type. (optional)
   * @param status A named status for the object. (optional)
   * @param title The title for the object. (optional)
   * @param content The content for the object. (optional)
   * @param featuredMedia The id of the featured media for the object. (optional)
   */
  public ApiResponse<Tile> wpV2TilePost(LocalDateTime date, LocalDateTime dateGmt, String password, String slug, String status, String title, String content, Integer featuredMedia) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (date != null)
      formParams.put("date", date);
if (dateGmt != null)
      formParams.put("date_gmt", dateGmt);
if (password != null)
      formParams.put("password", password);
if (slug != null)
      formParams.put("slug", slug);
if (status != null)
      formParams.put("status", status);
if (title != null)
      formParams.put("title", title);
if (content != null)
      formParams.put("content", content);
if (featuredMedia != null)
      formParams.put("featured_media", featuredMedia);
    
    String path = String.format("%s/wp/v2/tile", baseUrl);
      
    ResultType<Tile> resultType = new ResultType<Tile>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<List<Type>> wpV2TypesGet(String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/types", baseUrl);
      
    ResultType<List<Type>> resultType = new ResultType<List<Type>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param type  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<Type> wpV2TypesTypeGet(String type, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/types/{type}"
      .replaceAll("\\{" + "type" + "\\}", type), baseUrl);
      
    ResultType<Type> resultType = new ResultType<Type>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   * @param page Current page of the collection. (optional, default to 1)
   * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
   * @param search Limit results to those matching a string. (optional)
   * @param exclude Ensure result set excludes specific ids. (optional)
   * @param include Limit result set to specific ids. (optional)
   * @param offset Offset the result set by a specific number of items. (optional)
   * @param order Order sort attribute ascending or descending. (optional, default to asc)
   * @param orderby Sort collection by object attribute. (optional, default to name)
   * @param slug Limit result set to resources with a specific slug. (optional)
   * @param roles Limit result set to resources matching at least one specific role provided. Accepts csv list or single role. (optional)
   */
  public ApiResponse<List<User>> wpV2UsersGet(String context, Integer page, Integer perPage, String search, List<String> exclude, List<String> include, Integer offset, String order, String orderby, String slug, List<String> roles) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
if (page != null)
    queryParams.put("page", page);
if (perPage != null)
    queryParams.put("per_page", perPage);
if (search != null)
    queryParams.put("search", search);
if (exclude != null)
    queryParams.put("exclude", exclude);
if (include != null)
    queryParams.put("include", include);
if (offset != null)
    queryParams.put("offset", offset);
if (order != null)
    queryParams.put("order", order);
if (orderby != null)
    queryParams.put("orderby", orderby);
if (slug != null)
    queryParams.put("slug", slug);
if (roles != null)
    queryParams.put("roles", roles);
    
        
    String path = String.format("%s/wp/v2/users", baseUrl);
      
    ResultType<List<User>> resultType = new ResultType<List<User>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param force Required to be true, as resource does not support trashing. (optional)
   * @param reassign  (optional)
   */
  public ApiResponse<User> wpV2UsersIdDelete(String id, String force, String reassign) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (force != null)
    queryParams.put("force", force);
if (reassign != null)
    queryParams.put("reassign", reassign);
    
        
    String path = String.format("%s/wp/v2/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doDELETERequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param context Scope under which the request is made; determines fields present in response. (optional, default to view)
   */
  public ApiResponse<User> wpV2UsersIdGet(String id, String context) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (context != null)
    queryParams.put("context", context);
    
        
    String path = String.format("%s/wp/v2/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param id  (required)
   * @param username Login name for the resource. (optional)
   * @param name Display name for the resource. (optional)
   * @param firstName First name for the resource. (optional)
   * @param lastName Last name for the resource. (optional)
   * @param email The email address for the resource. (optional)
   * @param url URL of the resource. (optional)
   * @param description Description of the resource. (optional)
   * @param nickname The nickname for the resource. (optional)
   * @param slug An alphanumeric identifier for the resource. (optional)
   * @param roles Roles assigned to the resource. (optional)
   * @param password Password for the resource (never included). (optional)
   * @param capabilities All capabilities assigned to the resource. (optional)
   */
  public ApiResponse<User> wpV2UsersIdPost(String id, String username, String name, String firstName, String lastName, String email, String url, String description, String nickname, String slug, List<String> roles, String password, String capabilities) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (username != null)
      formParams.put("username", username);
if (name != null)
      formParams.put("name", name);
if (firstName != null)
      formParams.put("first_name", firstName);
if (lastName != null)
      formParams.put("last_name", lastName);
if (email != null)
      formParams.put("email", email);
if (url != null)
      formParams.put("url", url);
if (description != null)
      formParams.put("description", description);
if (nickname != null)
      formParams.put("nickname", nickname);
if (slug != null)
      formParams.put("slug", slug);
if (roles != null)
      formParams.put("roles", roles);
if (password != null)
      formParams.put("password", password);
if (capabilities != null)
      formParams.put("capabilities", capabilities);
    
    String path = String.format("%s/wp/v2/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * 
   * 
   * @param username Login name for the resource. (required)
   * @param email The email address for the resource. (required)
   * @param password Password for the resource (never included). (required)
   * @param name Display name for the resource. (optional)
   * @param firstName First name for the resource. (optional)
   * @param lastName Last name for the resource. (optional)
   * @param url URL of the resource. (optional)
   * @param description Description of the resource. (optional)
   * @param nickname The nickname for the resource. (optional)
   * @param slug An alphanumeric identifier for the resource. (optional)
   * @param roles Roles assigned to the resource. (optional)
   * @param capabilities All capabilities assigned to the resource. (optional)
   */
  public ApiResponse<User> wpV2UsersPost(String username, String email, String password, String name, String firstName, String lastName, String url, String description, String nickname, String slug, List<String> roles, String capabilities) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
    if (username != null)
      formParams.put("username", username);
if (name != null)
      formParams.put("name", name);
if (firstName != null)
      formParams.put("first_name", firstName);
if (lastName != null)
      formParams.put("last_name", lastName);
if (email != null)
      formParams.put("email", email);
if (url != null)
      formParams.put("url", url);
if (description != null)
      formParams.put("description", description);
if (nickname != null)
      formParams.put("nickname", nickname);
if (slug != null)
      formParams.put("slug", slug);
if (roles != null)
      formParams.put("roles", roles);
if (password != null)
      formParams.put("password", password);
if (capabilities != null)
      formParams.put("capabilities", capabilities);
    
    String path = String.format("%s/wp/v2/users", baseUrl);
      
    ResultType<User> resultType = new ResultType<User>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  
}
